"""
API Backend Grippe - Partie VACCINATION
√âtape par √©tape, on ajoute les fonctionnalit√©s
"""
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime

from app.vaccination import (
    calculer_taux_par_zone,
    get_details_zone,
    get_statistiques_nationales,
    calculer_taux_par_departement,
    get_details_departement,
    get_statistiques_par_zone_et_departement
)
from app.prediction import (
    predire_besoins_prochains_mois,
    get_stock_actuel_simule,
    get_stock_vs_besoin_par_zone
)
from app.couverture_vaccins import (
    # HPV
    get_hpv_national,
    get_hpv_regional,
    get_hpv_departemental,
    # Grippe d√©taill√©e
    get_grippe_national,
    get_grippe_regional,
    get_grippe_departemental,
    get_grippe_par_zones,
    # Utilitaires
    get_annees_disponibles,
    get_liste_regions,
    get_liste_departements
)
from app.urgences import (
    get_urgences_par_departement,
    get_urgences_par_region,
    get_urgences_nationales,
    get_urgences_par_zone
)
from app.ia_analyzer import analyze_with_ai, get_ollama_status
from app.medecins_reels import (
    get_medecins_reels_par_region,
    get_medecins_reels_par_zone,
    get_statistiques_medecins_reels,
    rechercher_medecins_reels,
    get_comptage_medecins_par_region
)
from app.couts_reels import (
    get_couts_vaccination_grippe,
    get_couts_par_zone,
    get_couts_par_departement,
    get_scenarios_vaccination
)

# Application FastAPI
app = FastAPI(
    title="API Grippe - Vaccination",
    description="Backend pour la strat√©gie vaccinale grippe - Partie 1: Vaccination",
    version="1.0.0"
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/")
def root():
    """Page d'accueil."""
    return {
        "message": "API Grippe - Vaccination + Pr√©diction + Couvertures D√©taill√©es",
        "version": "3.0.0",
        "endpoints": {
            "vaccination_zones": {
                "zones": "/vaccination/zones",
                "zone_details": "/vaccination/zone/{zone_code}",
                "national": "/vaccination/national",
                "departements": "/vaccination/departements",
                "departement_details": "/vaccination/departement/{code_dept}",
                "zones_avec_departements": "/vaccination/zones-departements"
            },
            "prediction": {
                "doses_nationales": "/prediction/doses",
                "doses_par_zone": "/prediction/doses/zone/{zone_code}",
                "stock_actuel": "/prediction/stock",
                "stock_vs_besoin": "/prediction/stock-vs-besoin"
            },
            "urgences": {
                "national": "/urgences/national",
                "regional": "/urgences/regional",
                "regional_detail": "/urgences/regional/{code_region}",
                "departemental": "/urgences/departemental",
                "departement_detail": "/urgences/departement/{code_departement}",
                "par_zone": "/urgences/zone/{zone_code}"
            },
            "ia_analysis": {
                "ollama_status": "/ai/status",
                "analyze_data": "/ai/analyze"
            },
            "medecins": {
                "comptage_regions": "/medecins/comptage",
                "par_zone": "/medecins/zone/{zone_code}",
                "par_region": "/medecins/region/{region_code}",
                "recherche": "/medecins/recherche",
                "statistiques": "/medecins/statistiques"
            },
            "couts_reels": {
                "national": "/couts/national",
                "par_zone": "/couts/zone/{zone_code}",
                "par_departement": "/couts/departement/{code_departement}",
                "scenarios": "/couts/scenarios"
            },
            "hpv": {
                "national": "/couverture/hpv/national",
                "regional": "/couverture/hpv/regional",
                "regional_detail": "/couverture/hpv/regional/{code_region}",
                "departemental": "/couverture/hpv/departemental",
                "departemental_detail": "/couverture/hpv/departemental/{code_dept}"
            },
            "grippe_detaillee": {
                "national": "/couverture/grippe/national",
                "regional": "/couverture/grippe/regional",
                "regional_detail": "/couverture/grippe/regional/{code_region}",
                "par_zones": "/couverture/grippe/zones",
                "departemental": "/couverture/grippe/departemental",
                "departemental_detail": "/couverture/grippe/departemental/{code_dept}"
            },
            "utilitaires": {
                "annees_disponibles": "/couverture/annees",
                "liste_regions": "/couverture/regions",
                "liste_departements": "/couverture/departements"
            }
        }
    }


@app.get("/health")
def health():
    """Health check."""
    return {"status": "ok"}


# ============================================
# PARTIE 1 : VACCINATION
# ============================================

@app.get("/vaccination/zones")
def get_vaccination_zones(annee: str = "2024"):
    """
    **Taux de vaccination par zone A, B, C**
    
    Retourne pour chaque zone :
    - Population totale et cible
    - Nombre de personnes vaccin√©es
    - Taux de vaccination (%)
    - Objectif et si atteint
    """
    try:
        zones = calculer_taux_par_zone(annee)
        
        return {
            "success": True,
            "annee": annee,
            "zones": zones
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/vaccination/zone/{zone_code}")
def get_vaccination_zone(zone_code: str, annee: str = "2024"):
    """
    **D√©tails d'une zone sp√©cifique (A, B ou C)**
    """
    try:
        zone = get_details_zone(zone_code.upper(), annee)
        
        if not zone:
            return {
                "success": False,
                "error": f"Zone {zone_code} non trouv√©e"
            }
        
        return {
            "success": True,
            "annee": annee,
            "zone": zone
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/vaccination/national")
def get_vaccination_national(annee: str = "2024"):
    """
    **Statistiques nationales de vaccination**
    """
    try:
        stats = get_statistiques_nationales(annee)
        
        return {
            "success": True,
            "annee": annee,
            "statistiques": stats
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/vaccination/departements")
def get_vaccination_departements(annee: str = "2024", zone: str = None):
    """
    **üìç Taux de vaccination par d√©partement**
    
    Retourne pour chaque d√©partement :
    - Code et nom du d√©partement
    - R√©gion et zone associ√©es
    - Population totale et cible
    - Nombre de personnes vaccin√©es
    - Taux de vaccination (%)
    - Objectif et si atteint
    
    **Param√®tres** :
    - `annee` : Ann√©e de r√©f√©rence (d√©faut: 2024)
    - `zone` : Filtre par zone (A, B ou C) ou None pour tous
    """
    try:
        if zone:
            zone = zone.upper()
            if zone not in ["A", "B", "C"]:
                return {
                    "success": False,
                    "error": "zone doit √™tre A, B ou C"
                }
        
        departements = calculer_taux_par_departement(annee, zone_filter=zone)
        
        return {
            "success": True,
            "annee": annee,
            "zone_filtre": zone,
            "nb_departements": len(departements),
            "departements": departements
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/vaccination/departement/{code_dept}")
def get_vaccination_departement(code_dept: str, annee: str = "2024"):
    """
    **üìç D√©tails d'un d√©partement sp√©cifique**
    
    **Param√®tres** :
    - `code_dept` : Code d√©partement (ex: "75" pour Paris)
    - `annee` : Ann√©e de r√©f√©rence
    """
    try:
        dept = get_details_departement(code_dept, annee)
        
        if not dept:
            return {
                "success": False,
                "error": f"D√©partement {code_dept} non trouv√©"
            }
        
        return {
            "success": True,
            "annee": annee,
            "departement": dept
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/vaccination/zones-departements")
def get_vaccination_zones_avec_departements(annee: str = "2024"):
    """
    **üìä Statistiques par zone avec d√©tails des d√©partements**
    
    Vue agr√©g√©e par zone (A, B, C) avec liste des d√©partements
    et leurs taux de vaccination respectifs
    
    **Param√®tres** :
    - `annee` : Ann√©e de r√©f√©rence (d√©faut: 2024)
    """
    try:
        stats = get_statistiques_par_zone_et_departement(annee)
        
        return {
            "success": True,
            "annee": annee,
            "zones": stats
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


# ============================================
# PARTIE 2 : PR√âDICTION DES BESOINS EN DOSES
# ============================================

@app.get("/prediction/doses")
def get_prediction_doses_nationales(horizon_mois: int = 1):
    """
    **üìä Pr√©diction des besoins en doses au niveau national**
    
    Pr√©diction bas√©e sur :
    - Donn√©es historiques 2021-2024 (IQVIA)
    - Moyenne mobile + Tendance
    - Saisonnalit√© (pic oct-d√©c)
    
    **Param√®tres** :
    - `horizon_mois` : Nombre de mois √† pr√©dire (1-3)
    
    **Retourne** :
    - Pr√©dictions mensuelles
    - Statistiques historiques
    - Contexte saisonnier
    """
    try:
        if horizon_mois < 1 or horizon_mois > 3:
            return {
                "success": False,
                "error": "horizon_mois doit √™tre entre 1 et 3"
            }
        
        prediction = predire_besoins_prochains_mois(zone_code=None, horizon_mois=horizon_mois)
        
        return {
            "success": True,
            "data": prediction
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/prediction/doses/zone/{zone_code}")
def get_prediction_doses_zone(zone_code: str, horizon_mois: int = 1):
    """
    **üìä Pr√©diction des besoins en doses par zone (A, B, C)**
    
    Pr√©diction ajust√©e par zone en fonction de la population
    
    **Param√®tres** :
    - `zone_code` : Code zone (A, B ou C)
    - `horizon_mois` : Nombre de mois √† pr√©dire (1-3)
    """
    try:
        zone_code = zone_code.upper()
        
        if zone_code not in ["A", "B", "C"]:
            return {
                "success": False,
                "error": "zone_code doit √™tre A, B ou C"
            }
        
        if horizon_mois < 1 or horizon_mois > 3:
            return {
                "success": False,
                "error": "horizon_mois doit √™tre entre 1 et 3"
            }
        
        prediction = predire_besoins_prochains_mois(zone_code=zone_code, horizon_mois=horizon_mois)
        
        return {
            "success": True,
            "data": prediction
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/prediction/stock")
def get_stock_actuel(zone_code: str = None):
    """
    **üì¶ Estimation du stock de doses disponibles**
    
    Calcule une estimation du stock bas√©e sur les donn√©es historiques :
    - Stock disponible en entrep√¥t
    - R√©serve strat√©gique (15%)
    - Doses distribu√©es dans les centres (25%)
    - Doses en transit (5%)
    - Niveau d'alerte et recommandations
    - Autonomie en jours
    
    **Note** : Les valeurs sont estim√©es √† partir des donn√©es de distribution.
    En production, cette route serait connect√©e √† l'API de gestion de stock r√©elle.
    
    **Param√®tres** :
    - `zone_code` : Code zone (A, B, C) ou None pour national
    """
    try:
        if zone_code:
            zone_code = zone_code.upper()
            if zone_code not in ["A", "B", "C"]:
                return {
                    "success": False,
                    "error": "zone_code doit √™tre A, B ou C"
                }
        
        stock = get_stock_actuel_simule(zone_code=zone_code)
        
        return {
            "success": True,
            "data": stock
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/prediction/stock-vs-besoin")
def get_stock_vs_besoin():
    """
    **üìä Comparaison Stock vs Besoin par Zone**
    
    Tableau de bord comparant pour chaque zone (A, B, C) :
    - **Current Inventory** : Stock actuel disponible
    - **Forecasted Need (Next 30 Days)** : Besoin pr√©vu sur 30 jours
    - **Surplus/Deficit** : Diff√©rence (positif = exc√©dent, n√©gatif = d√©ficit)
    - Taux de couverture et autonomie en jours
    - Recommandations et alertes
    
    **Retourne** :
    - Donn√©es par zone
    - Total national
    - Alertes et recommandations
    """
    try:
        data = get_stock_vs_besoin_par_zone()
        
        return {
            "success": True,
            "data": data
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


# ============================================
# PARTIE 3 : COUVERTURES VACCINALES D√âTAILL√âES
# ============================================

# ------------------
# HPV (Papillomavirus)
# ------------------

@app.get("/couverture/hpv/national")
def get_couverture_hpv_national(annee_debut: str = "2022"):
    """
    **üíâ Couverture vaccinale HPV au niveau national**
    
    Donn√©es HPV (filles et gar√ßons, doses 1 et 2) depuis 2022
    
    **Param√®tres** :
    - `annee_debut` : Ann√©e de d√©but (d√©faut: 2022)
    
    **Retourne** :
    - √âvolution annuelle HPV filles/gar√ßons
    """
    try:
        data = get_hpv_national(annee_debut=annee_debut)
        return {
            "success": True,
            "data": data
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/couverture/hpv/regional")
def get_couverture_hpv_regional_tous(annee_debut: str = "2022"):
    """
    **üíâ Couverture HPV toutes les r√©gions**
    
    **Param√®tres** :
    - `annee_debut` : Ann√©e de d√©but (d√©faut: 2022)
    """
    try:
        data = get_hpv_regional(code_region=None, annee_debut=annee_debut)
        return {
            "success": True,
            "data": data
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/couverture/hpv/regional/{code_region}")
def get_couverture_hpv_regional_detail(code_region: str, annee_debut: str = "2022"):
    """
    **üíâ Couverture HPV d'une r√©gion sp√©cifique**
    
    **Param√®tres** :
    - `code_region` : Code r√©gion (ex: "11" pour IDF)
    - `annee_debut` : Ann√©e de d√©but (d√©faut: 2022)
    """
    try:
        data = get_hpv_regional(code_region=code_region, annee_debut=annee_debut)
        return {
            "success": True,
            "data": data
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/couverture/hpv/departemental")
def get_couverture_hpv_departemental_tous(annee_debut: str = "2022"):
    """
    **üíâ Couverture HPV tous les d√©partements**
    
    **Param√®tres** :
    - `annee_debut` : Ann√©e de d√©but (d√©faut: 2022)
    """
    try:
        data = get_hpv_departemental(code_dept=None, annee_debut=annee_debut)
        return {
            "success": True,
            "data": data
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/couverture/hpv/departemental/{code_dept}")
def get_couverture_hpv_departemental_detail(code_dept: str, annee_debut: str = "2022"):
    """
    **üíâ Couverture HPV d'un d√©partement sp√©cifique**
    
    **Param√®tres** :
    - `code_dept` : Code d√©partement (ex: "75" pour Paris)
    - `annee_debut` : Ann√©e de d√©but (d√©faut: 2022)
    """
    try:
        data = get_hpv_departemental(code_dept=code_dept, annee_debut=annee_debut)
        return {
            "success": True,
            "data": data
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


# ------------------
# GRIPPE D√âTAILL√âE
# ------------------

@app.get("/couverture/grippe/national")
def get_couverture_grippe_national_route(annee: str = None):
    """
    **ü¶† Couverture vaccinale grippe d√©taill√©e au niveau national**
    
    Toutes les cat√©gories :
    - Moins de 65 ans
    - 65 ans et plus
    - 65-74 ans
    - 75 ans et plus
    - R√©sidents EHPAD
    - Professionnels de sant√©
    
    **Param√®tres** :
    - `annee` : Ann√©e sp√©cifique ou None pour toutes les ann√©es
    """
    try:
        data = get_grippe_national(annee=annee)
        return {
            "success": True,
            "data": data
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/couverture/grippe/regional")
def get_couverture_grippe_regional_tous(annee: str = None):
    """
    **ü¶† Couverture grippe toutes les r√©gions**
    
    **Param√®tres** :
    - `annee` : Ann√©e sp√©cifique ou None pour toutes
    """
    try:
        data = get_grippe_regional(code_region=None, annee=annee)
        return {
            "success": True,
            "data": data
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/couverture/grippe/regional/{code_region}")
def get_couverture_grippe_regional_detail(code_region: str, annee: str = None):
    """
    **ü¶† Couverture grippe d'une r√©gion sp√©cifique**
    
    **Param√®tres** :
    - `code_region` : Code r√©gion (ex: "11")
    - `annee` : Ann√©e sp√©cifique ou None pour toutes
    """
    try:
        data = get_grippe_regional(code_region=code_region, annee=annee)
        return {
            "success": True,
            "data": data
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/couverture/grippe/zones")
def get_couverture_grippe_par_zones(annee: str = None):
    """
    **ü¶† Couverture grippe group√©e par zones (A, B, C)**
    
    Regroupe les r√©gions par zones g√©ographiques :
    - Zone A : Grandes m√©tropoles (√éle-de-France, Auvergne-Rh√¥ne-Alpes, etc.)
    - Zone B : Agglom√©rations moyennes 
    - Zone C : Reste de la France
    
    **Param√®tres** :
    - `annee` : Ann√©e sp√©cifique ou None pour toutes
    
    **Retourne** :
    - Donn√©es group√©es par zone
    - Statistiques moyennes par zone
    - Liste des r√©gions dans chaque zone
    """
    try:
        data = get_grippe_par_zones(annee=annee)
        return {
            "success": True,
            "data": data
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/couverture/grippe/departemental")
def get_couverture_grippe_departemental_tous(annee: str = None):
    """
    **ü¶† Couverture grippe tous les d√©partements**
    
    **Param√®tres** :
    - `annee` : Ann√©e sp√©cifique ou None pour toutes
    """
    try:
        data = get_grippe_departemental(code_dept=None, annee=annee)
        return {
            "success": True,
            "data": data
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/couverture/grippe/departemental/{code_dept}")
def get_couverture_grippe_departemental_detail(code_dept: str, annee: str = None):
    """
    **ü¶† Couverture grippe d'un d√©partement sp√©cifique**
    
    **Param√®tres** :
    - `code_dept` : Code d√©partement (ex: "75")
    - `annee` : Ann√©e sp√©cifique ou None pour toutes
    """
    try:
        data = get_grippe_departemental(code_dept=code_dept, annee=annee)
        return {
            "success": True,
            "data": data
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


# ------------------
# UTILITAIRES
# ------------------

@app.get("/couverture/annees")
def get_annees_disponibles_route():
    """
    **üìÖ Liste des ann√©es disponibles**
    
    Retourne les ann√©es avec donn√©es HPV et Grippe
    """
    try:
        data = get_annees_disponibles()
        return {
            "success": True,
            "data": data
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/couverture/regions")
def get_liste_regions_route():
    """
    **üó∫Ô∏è Liste de toutes les r√©gions**
    
    Retourne la liste des r√©gions avec codes
    """
    try:
        data = get_liste_regions()
        return {
            "success": True,
            "data": data
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


# ============================================
# PARTIE 5 : URGENCES GRIPPE
# ============================================

@app.get("/urgences/national")
def get_urgences_nationales_route(annee: str = None):
    """
    **üö® Urgences Nationales**
    
    Retourne les donn√©es de passages aux urgences pour la grippe au niveau national.
    
    **Param√®tres** :
    - annee : Ann√©e (2020, 2021, 2022, 2023) ou None pour toutes les ann√©es
    
    **Retourne** :
    - Donn√©es nationales d'urgences grippe
    - Statistiques calcul√©es
    - P√©riode des donn√©es
    """
    try:
        result = get_urgences_nationales(annee)
        
        return {
            "success": True,
            "annee": annee,
            "data": result,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/urgences/regional")
def get_urgences_regionales_route(annee: str = None):
    """
    **üö® Urgences R√©gionales**
    
    Retourne les donn√©es de passages aux urgences pour la grippe par r√©gion.
    
    **Param√®tres** :
    - annee : Ann√©e (2020, 2021, 2022, 2023) ou None pour toutes les ann√©es
    
    **Retourne** :
    - Donn√©es r√©gionales d'urgences grippe
    - Statistiques par r√©gion
    - P√©riode des donn√©es
    """
    try:
        result = get_urgences_par_region(None, annee)
        
        return {
            "success": True,
            "annee": annee,
            "data": result,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/urgences/regional/{code_region}")
def get_urgences_region_detail_route(code_region: str, annee: str = None):
    """
    **üö® Urgences par R√©gion**
    
    Retourne les donn√©es de passages aux urgences pour la grippe d'une r√©gion sp√©cifique.
    
    **Param√®tres** :
    - code_region : Code r√©gion (11, 84, 93, etc.)
    - annee : Ann√©e (2020, 2021, 2022, 2023) ou None pour toutes les ann√©es
    
    **Retourne** :
    - Donn√©es d'urgences de la r√©gion
    - Statistiques d√©taill√©es
    - P√©riode des donn√©es
    """
    try:
        result = get_urgences_par_region(code_region, annee)
        
        if result["total_regions"] == 0:
            return {
                "success": False,
                "error": f"Aucune donn√©e d'urgence trouv√©e pour la r√©gion {code_region}"
            }
        
        return {
            "success": True,
            "region_code": code_region,
            "annee": annee,
            "data": result,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/urgences/departemental")
def get_urgences_departementales_route(annee: str = None):
    """
    **üö® Urgences D√©partementales**
    
    Retourne les donn√©es de passages aux urgences pour la grippe par d√©partement.
    
    **Param√®tres** :
    - annee : Ann√©e (2020, 2021, 2022, 2023) ou None pour toutes les ann√©es
    
    **Retourne** :
    - Donn√©es d√©partementales d'urgences grippe
    - Statistiques par d√©partement
    - P√©riode des donn√©es
    """
    try:
        result = get_urgences_par_departement(None, annee)
        
        return {
            "success": True,
            "annee": annee,
            "data": result,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/urgences/departement/{code_departement}")
def get_urgences_departement_detail_route(code_departement: str, annee: str = None):
    """
    **üö® Urgences par D√©partement**
    
    Retourne les donn√©es de passages aux urgences pour la grippe d'un d√©partement sp√©cifique.
    
    **Param√®tres** :
    - code_departement : Code d√©partement (61, 75, 69, etc.)
    - annee : Ann√©e (2020, 2021, 2022, 2023) ou None pour toutes les ann√©es
    
    **Retourne** :
    - Donn√©es d'urgences du d√©partement
    - Statistiques d√©taill√©es
    - P√©riode des donn√©es
    """
    try:
        result = get_urgences_par_departement(code_departement, annee)
        
        if result["total_departements"] == 0:
            return {
                "success": False,
                "error": f"Aucune donn√©e d'urgence trouv√©e pour le d√©partement {code_departement}"
            }
        
        return {
            "success": True,
            "departement_code": code_departement,
            "annee": annee,
            "data": result,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/urgences/zone/{zone_code}")
def get_urgences_par_zone_route(zone_code: str, annee: str = None):
    """
    **üö® Urgences par Zone**
    
    Retourne les donn√©es de passages aux urgences pour la grippe d'une zone sp√©cifique (A, B, C).
    
    **Param√®tres** :
    - zone_code : Code zone (A, B, C)
    - annee : Ann√©e (2020, 2021, 2022, 2023) ou None pour toutes les ann√©es
    
    **Retourne** :
    - Donn√©es d'urgences de la zone
    - Statistiques par r√©gion dans la zone
    - P√©riode des donn√©es
    """
    try:
        if zone_code not in ["A", "B", "C"]:
            return {
                "success": False,
                "error": "Zone code doit √™tre A, B ou C"
            }
        
        result = get_urgences_par_zone(zone_code, annee)
        
        return {
            "success": True,
            "zone": zone_code,
            "annee": annee,
            "data": result,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


# ============================================
# PARTIE 6 : IA OLLAMA
# ============================================

@app.get("/ai/status")
def get_ai_status():
    """
    **ü§ñ Statut de l'IA Ollama**
    
    V√©rifie si Ollama est disponible et liste les mod√®les install√©s
    """
    try:
        status = get_ollama_status()
        
        return {
            "success": True,
            "data": status
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.post("/ai/analyze")
def analyze_vaccination_data(request: dict):
    """
    **ü§ñ Analyse IA des Donn√©es de Vaccination**
    
    Utilise Ollama (IA locale) pour analyser vos donn√©es de vaccination.
    
    **Corps de la requ√™te** :
    ```json
    {
        "prompt": "Analyse les tendances de vaccination et donne des recommandations",
        "data_type": "zones|departements|national",
        "model": "llama3.2",
        "annee": "2024"
    }
    ```
    
    **Exemples de prompts** :
    - "Analyse les zones les moins vaccin√©es et propose des actions"
    - "Compare les taux de vaccination par r√©gion et identifie les disparit√©s"
    - "Donne des recommandations pour am√©liorer la couverture vaccinale"
    - "Analyse l'√©volution de la vaccination et pr√©dit les tendances"
    
    **Retourne** :
    - Analyse d√©taill√©e de l'IA
    - Recommandations personnalis√©es
    - Mod√®le utilis√© et timestamp
    """
    try:
        # Validation des param√®tres
        prompt = request.get("prompt", "")
        data_type = request.get("data_type", "zones")
        model = request.get("model", "llama3.2")
        annee = request.get("annee", "2024")
        
        if not prompt.strip():
            return {
                "success": False,
                "error": "Le prompt est requis"
            }
        
        # Charger les donn√©es selon le type demand√©
        data = {}
        
        if data_type == "zones":
            from app.vaccination import calculer_taux_par_zone
            zones = calculer_taux_par_zone(annee)
            data = {"zones": zones}
            
        elif data_type == "departements":
            from app.vaccination import calculer_taux_par_departement
            departements = calculer_taux_par_departement(annee)
            data = {"departements": departements}
            
        elif data_type == "national":
            from app.vaccination import get_statistiques_nationales
            stats = get_statistiques_nationales(annee)
            data = {"statistiques": stats}
            
        else:
            return {
                "success": False,
                "error": "data_type doit √™tre 'zones', 'departements' ou 'national'"
            }
        
        # Analyser avec l'IA
        result = analyze_with_ai(prompt, data, model)
        
        return {
            "success": True,
            "data": result
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


# ============================================
# PARTIE 7 : M√âDECINS R√âELS
# ============================================

@app.get("/medecins/comptage")
def get_comptage_medecins():
    """
    **üìä Comptage des M√©decins par R√©gion**
    
    Retourne le nombre de m√©decins par r√©gion + 10 exemples par r√©gion.
    **Optimis√©** pour √©viter de charger tous les m√©decins.
    
    **Retourne** :
    - Nombre total de m√©decins
    - Comptage par r√©gion
    - 10 exemples de m√©decins par r√©gion (avec GPS)
    - Top 10 des r√©gions
    """
    try:
        comptage = get_comptage_medecins_par_region()
        
        return {
            "success": True,
            "data": comptage,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/medecins/zone/{zone_code}")
def get_medecins_par_zone_api(zone_code: str, limit: int = 100, offset: int = 0):
    """
    **üè• M√©decins par Zone (Pagin√©)**
    
    Retourne les m√©decins d'une zone sp√©cifique avec pagination.
    
    **Param√®tres** :
    - zone_code : Code zone (A, B, C)
    - limit : Nombre de m√©decins √† retourner (max 100, d√©faut 100)
    - offset : D√©calage pour la pagination (d√©faut 0)
    
    **Exemples** :
    - `/medecins/zone/A` ‚Üí 100 premiers m√©decins Zone A
    - `/medecins/zone/A?limit=50&offset=100` ‚Üí 50 m√©decins suivants
    
    **Retourne** :
    - M√©decins de la zone avec coordonn√©es GPS
    - Informations de pagination
    """
    try:
        if zone_code not in ["A", "B", "C"]:
            return {
                "success": False,
                "error": "Zone code doit √™tre A, B ou C"
            }
        
        if limit > 100:
            limit = 100  # Limite maximale
        
        result = get_medecins_reels_par_zone(zone_code, limit, offset)
        
        return {
            "success": True,
            "zone": zone_code,
            "data": result,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/medecins/region/{region_code}")
def get_medecins_par_region_api(region_code: str, limit: int = 100, offset: int = 0):
    """
    **üè• M√©decins par R√©gion (Pagin√©)**
    
    Retourne les m√©decins d'une r√©gion sp√©cifique avec pagination.
    
    **Param√®tres** :
    - region_code : Code r√©gion (11, 84, 93, etc.)
    - limit : Nombre de m√©decins √† retourner (max 100, d√©faut 100)
    - offset : D√©calage pour la pagination (d√©faut 0)
    
    **Exemples** :
    - `/medecins/region/11` ‚Üí 100 premiers m√©decins √éle-de-France
    - `/medecins/region/11?limit=50&offset=100` ‚Üí 50 m√©decins suivants
    
    **Retourne** :
    - M√©decins de la r√©gion avec coordonn√©es GPS
    - Informations de pagination
    """
    try:
        if limit > 100:
            limit = 100  # Limite maximale
        
        result = get_medecins_reels_par_region(region_code, limit, offset)
        
        if result["pagination"]["total"] == 0:
            return {
                "success": False,
                "error": f"Aucun m√©decin trouv√© pour la r√©gion {region_code}"
            }
        
        return {
            "success": True,
            "region_code": region_code,
            "data": result,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/medecins/recherche")
def rechercher_medecins_api(
    zone_code: str = None,
    region_code: str = None,
    departement: str = None,
    specialite: str = None,
    avec_gps: bool = None
):
    """
    **üîç Recherche Avanc√©e de M√©decins**
    
    Recherche de m√©decins avec filtres multiples.
    
    **Param√®tres de recherche** :
    - zone_code : Code zone (A, B, C)
    - region_code : Code r√©gion (11, 84, 93, etc.)
    - departement : Nom du d√©partement
    - specialite : Sp√©cialit√© m√©dicale
    - avec_gps : Avoir des coordonn√©es GPS (true/false)
    
    **Exemples** :
    - `/medecins/recherche?avec_gps=true&zone_code=A`
    - `/medecins/recherche?region_code=11&specialite=g√©n√©raliste`
    - `/medecins/recherche?departement=Calvados`
    
    **Retourne** :
    - M√©decins correspondant aux crit√®res
    - Coordonn√©es GPS pour carte
    - D√©tails pratiques
    """
    try:
        medecins = rechercher_medecins_reels(
            zone_code=zone_code,
            region_code=region_code,
            departement=departement,
            specialite=specialite,
            avec_gps=avec_gps
        )
        
        return {
            "success": True,
            "filtres_appliques": {
                "zone_code": zone_code,
                "region_code": region_code,
                "departement": departement,
                "specialite": specialite,
                "avec_gps": avec_gps
            },
            "total_trouves": len(medecins),
            "medecins": medecins,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/medecins/statistiques")
def get_statistiques_medecins_api():
    """
    **üìä Statistiques des M√©decins**
    
    Retourne les statistiques globales des m√©decins par zone et r√©gion.
    
    **Retourne** :
    - Nombre total de m√©decins
    - Capacit√© totale de vaccination
    - R√©partition par zone
    - Statistiques par r√©gion
    """
    try:
        stats = get_statistiques_medecins_reels()
        
        return {
            "success": True,
            "statistiques": stats,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


# ============================================
# PARTIE 8 : CO√õTS R√âELS VACCINATION
# ============================================

@app.get("/couts/national")
def get_couts_nationaux():
    """
    **üí∞ Co√ªts R√©els de la Vaccination Grippe - France**
    
    Calcule l'impact financier complet de la vaccination grippe :
    
    **Co√ªts Directs** :
    - Vaccins (6.20‚Ç¨) + Honoraire pharmacien (0.60‚Ç¨)
    - Consultations m√©dicales (25‚Ç¨)
    - Remboursements S√©curit√© Sociale (65% vaccins, 70% consultations)
    
    **Co√ªts Indirects √âvit√©s** :
    - Consultations pour grippe (25‚Ç¨)
    - M√©dicaments (15‚Ç¨)
    - Arr√™ts maladie (5 jours √ó 50‚Ç¨ = 250‚Ç¨)
    - Hospitalisations (3 jours √ó 800‚Ç¨ = 2,400‚Ç¨)
    - Complications (500‚Ç¨)
    
    **Retourne** :
    - Co√ªts totaux vaccination
    - √âconomies g√©n√©r√©es
    - ROI (Return on Investment)
    - R√©partition par acteur (S√©cu, Mutuelles, Patients)
    - Impact √©conomique (jours d'arr√™t √©vit√©s, hospitalisations √©vit√©es)
    """
    try:
        couts = get_couts_vaccination_grippe()
        
        return {
            "success": True,
            "data": couts,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/couts/zone/{zone_code}")
def get_couts_par_zone_api(zone_code: str):
    """
    **üí∞ Co√ªts de la Vaccination par Zone**
    
    Calcule les co√ªts sp√©cifiques √† une zone g√©ographique.
    
    **Param√®tres** :
    - zone_code : Code zone (A, B, C)
    
    **Retourne** :
    - Population de la zone
    - Taux de vaccination zone
    - Co√ªts vaccination zone
    - √âconomies g√©n√©r√©es zone
    - ROI zone
    """
    try:
        if zone_code not in ["A", "B", "C"]:
            return {
                "success": False,
                "error": "Zone code doit √™tre A, B ou C"
            }
        
        couts_zone = get_couts_par_zone(zone_code)
        
        return {
            "success": True,
            "zone": zone_code,
            "data": couts_zone,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/couts/departement/{code_departement}")
def get_couts_par_departement_api(code_departement: str):
    """
    **üí∞ Co√ªts de la Vaccination par D√©partement**
    
    Calcule les co√ªts sp√©cifiques √† un d√©partement.
    
    **Param√®tres** :
    - code_departement : Code d√©partement (75, 13, 69, etc.)
    
    **Exemples** :
    - `/couts/departement/75` ‚Üí Co√ªts Paris
    - `/couts/departement/13` ‚Üí Co√ªts Bouches-du-Rh√¥ne
    - `/couts/departement/69` ‚Üí Co√ªts Rh√¥ne
    
    **Retourne** :
    - Population d√©partement
    - Taux de vaccination d√©partement
    - Co√ªts vaccination d√©partement
    - √âconomies g√©n√©r√©es d√©partement
    - ROI d√©partement
    """
    try:
        couts_dept = get_couts_par_departement(code_departement)
        
        return {
            "success": True,
            "departement": code_departement,
            "data": couts_dept,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/couts/scenarios")
def get_scenarios_vaccination_api():
    """
    **üìä Sc√©narios de Vaccination - Comparaison des Co√ªts**
    
    Compare diff√©rents taux de vaccination et leur impact financier.
    
    **Sc√©narios analys√©s** :
    - 20% : Taux actuel faible
    - 35% : Taux actuel moyen
    - 50% : Objectif interm√©diaire
    - 70% : Objectif optimal
    - 85% : Objectif ambitieux
    
    **Retourne** :
    - Co√ªts par sc√©nario
    - √âconomies par sc√©nario
    - ROI par sc√©nario
    - Recommandation du taux optimal
    - Justification √©conomique
    """
    try:
        scenarios = get_scenarios_vaccination()
        
        return {
            "success": True,
            "data": scenarios,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/couverture/departements")
def get_liste_departements_route():
    """
    **üèòÔ∏è Liste de tous les d√©partements**
    
    Retourne la liste des d√©partements avec codes et r√©gions
    """
    try:
        data = get_liste_departements()
        return {
            "success": True,
            "data": data
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }